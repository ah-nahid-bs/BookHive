@model IEnumerable<BookHive.ViewModels.WishlistViewModel>

<div class="container py-4">
    <h2 class="section-heading">My Wishlist</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info no-books-alert">Your wishlist is empty.</div>
    }
    else
    {
        <div class="row">
            @foreach (var item in Model)
            {
                <div class="col-md-3 mb-4">
                    <div class="book-card shadow-sm" data-book-id="@item.BookId">
                        <img src="@item.ImageUrl" alt="@item.Title" class="book-image w-100 pt-5 ps-5 pe-5" />
                        <div class="book-card-body d-flex flex-column">
                            <h6 class="book-title">@item.Title</h6>
                            <p class="current-price">à§³@item.Price</p>
                            <div class="d-flex gap-2 mt-auto">
                                <a href="/Books/Details/@item.BookId" class="btn btn-details btn-sm flex-grow-1">View</a>
                                <button class="btn btn-wishlist btn-sm added" title="Remove from Wishlist" data-book-id="@item.BookId">
                                    <i class="bi bi-heart-fill"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Toast Notification -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="wishlistToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Wishlist</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>
</div>

<style>
    :root {
        --lavender-primary: hsl(270, 50%, 70%); /* #9b87f5 */
        --lavender-light: hsl(270, 30%, 90%); /* #f8f4ff */
        --lavender-dark: hsl(270, 40%, 40%); /* #7e69ab */
    }

    /* No Books Alert */
    .no-books-alert {
        background: var(--lavender-light);
        border: 1px solid var(--lavender-primary);
        color: #6e59a5;
        border-radius: 8px;
        padding: 1rem;
        font-size: 1rem;
        text-align: center;
    }

    /* Book Card */
    .book-card {
        background: linear-gradient(135deg, #ffffff, var(--lavender-light));
        border: 1px solid rgba(155, 135, 245, 0.2);
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .book-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(155, 135, 245, 0.3);
    }

    /* Book Image */
    .book-image {
        height: 250px;
        object-fit: cover;
        border-bottom: 1px solid rgba(155, 135, 245, 0.1);
    }

    /* Book Card Body */
    .book-card-body {
        padding: 1rem;
    }

    /* Book Title */
    .book-title {
        font-size: 1rem;
        font-weight: 600;
        color: #3c2f5f;
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Price */
    .current-price {
        font-size: 1rem;
        font-weight: 600;
        color: var(--lavender-primary);
        margin-bottom: 0.5rem;
    }

    /* View Details Button */
    .btn-details {
        background: var(--lavender-primary);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
        font-size: 0.875rem;
    }

    .btn-details:hover {
        background: var(--lavender-dark);
        color: white;
    }

    /* Wishlist Button */
    .btn-wishlist {
        background: #ffffff;
        border: 1px solid var(--lavender-primary);
        border-radius: 8px;
        padding: 0.5rem;
        color: var(--lavender-primary);
        transition: all 0.3s ease;
        width: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-wishlist:hover {
        background: var(--lavender-primary);
        color: #ffffff;
    }

    .btn-wishlist.added {
        background: var(--lavender-primary);
        color: #ffffff;
        border-color: var(--lavender-primary);
    }

    .btn-wishlist.added i.bi-heart::before {
        content: "\f443"; /* Bootstrap Icons filled heart (bi-heart-fill) */
    }
</style>

@section Scripts {
    <script>
        document.querySelectorAll('.btn-wishlist').forEach(button => {
            button.addEventListener('click', function () {
                const bookId = this.getAttribute('data-book-id');
                const isAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();

                if (!isAuthenticated) {
                    alert('Please log in to manage your wishlist.');
                    window.location.href = '/Account/Login';
                    return;
                }

                const isAdded = this.classList.contains('added');
                const url = isAdded ? '/Wishlist/RemoveFromWishlist' : '/Wishlist/AddToWishlist';

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ bookId: bookId })
                })
                .then(response => response.json())
                .then(data => {
                    const toast = new bootstrap.Toast(document.getElementById('wishlistToast'));
                    const toastBody = document.querySelector('#wishlistToast .toast-body');

                    if (data.success) {
                        if (isAdded) {
                            // Remove book card
                            this.closest('.col-md-3').remove();
                            if (document.querySelectorAll('.col-md-3').length === 0) {
                                document.querySelector('.row').innerHTML = '<div class="alert alert-info no-books-alert">Your wishlist is empty.</div>';
                            }
                            toastBody.textContent = 'Book removed from wishlist!';
                        } else {
                            this.classList.add('added');
                            toastBody.textContent = 'Book added to wishlist!';
                        }
                        toast.show();
                    } else {
                        toastBody.textContent = 'Error: ' + (data.message || 'Could not update wishlist.');
                        toast.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const toast = new bootstrap.Toast(document.getElementById('wishlistToast'));
                    document.querySelector('#wishlistToast .toast-body').textContent = 'An error occurred while updating the wishlist.';
                    toast.show();
                });
            });
        });
    </script>
}