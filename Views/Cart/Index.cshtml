@model BookHive.ViewModels.CartViewModel

@{
    ViewData["Title"] = "My Cart";
}

<div class="container py-4">
    <h2 class="mb-4 section-heading">My Cart</h2>

    @if (!Model.Items.Any())
    {
        <div class="alert alert-info no-cart-items">Your cart is empty.</div>
        <a asp-controller="Home" asp-action="Index" class="btn btn-primary">Continue Shopping</a>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered cart-table">
                <thead class="table-header">
                    <tr>
                        <th>Book</th>
                        <th>Image</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr class="cart-item" data-cart-item-id="@item.CartItemId" data-book-id="@item.BookId">
                            <td class="book-title">@item.Title</td>
                            <td><img src="@item.ImageUrl" alt="@item.Title" class="cart-image" /></td>
                            <td class="price" data-price="@item.Price">@item.Price.ToString("C")</td>
                            <td class="quantity">
                                <div class="quantity-control d-flex align-items-center justify-content-center">
                                    <button class="btn btn-decrement btn-sm" data-cart-item-id="@item.CartItemId" title="Decrease Quantity">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="text" class="quantity-input form-control form-control-sm mx-1 text-center" value="@item.Quantity" readonly style="width: 50px;" />
                                    <button class="btn btn-increment btn-sm" data-cart-item-id="@item.CartItemId" title="Increase Quantity">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </td>
                            <td class="total" data-total="@item.Total">@item.Total.ToString("C")</td>
                            <td>
                                <button class="btn btn-remove" data-cart-item-id="@item.CartItemId">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center cart-footer">
            <h4 class="cart-total">Total: <span id="cart-total">@Model.TotalPrice.ToString("C")</span></h4>
            <div class="cart-actions">
                @if (User.Identity.IsAuthenticated)
                {
                    <a asp-controller="Order" asp-action="Checkout" class="btn btn-checkout">Proceed to Checkout</a>
                }
                else
                {
                    <a asp-controller="Account" asp-action="Login" class="btn btn-checkout">Login to Checkout</a>
                }
                <form asp-action="Clear" method="post" class="d-inline">
                    <button class="btn btn-clear">Clear Cart</button>
                </form>
            </div>
        </div>
    }

    <!-- Toast Notification -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="cartToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Cart</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>
</div>

<style>
    :root {
        --lavender-primary: hsl(270, 50%, 70%);
        --lavender-light: hsl(270, 30%, 90%);
        --lavender-dark: hsl(270, 40%, 40%);
    }

    .section-heading {
        color: #3c2f5f;
        font-weight: 600;
        font-size: 1.75rem;
    }

    .no-cart-items {
        background: var(--lavender-light);
        border: 1px solid var(--lavender-primary);
        color: #6e59a5;
        border-radius: 8px;
        padding: 1rem;
        font-size: 1rem;
        text-align: center;
    }

    .table-responsive {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(155, 135, 245, 0.1);
    }

    .cart-table {
        background: #fff;
        border: none;
        margin-bottom: 0;
    }

    .table-header {
        background: linear-gradient(135deg, #ffffff, var(--lavender-light));
    }

    .table-header th {
        color: #3c2f5f;
        font-weight: 600;
        padding: 1rem;
        font-size: 1rem;
        text-align: center;
    }

    .cart-item {
        background: #fff;
        transition: background-color 0.3s ease;
    }

    .cart-item:hover {
        background: var(--lavender-light);
    }

    .cart-item td {
        vertical-align: middle;
        padding: 1rem;
        text-align: center;
        border-color: rgba(155, 135, 245, 0.2);
    }

    .book-title {
        color: #3c2f5f;
        font-weight: 500;
        font-size: 1rem;
    }

    .cart-image {
        width: 60px;
        height: 90px;
        object-fit: cover;
        border-radius: 8px;
        border: 1px solid rgba(155, 135, 245, 0.2);
    }

    .price,
    .total {
        color: var(--lavender-primary);
        font-weight: 600;
        font-size: 1rem;
    }

    .quantity-control {
        max-width: 150px;
        margin: 0 auto;
    }

    .quantity-input {
        background: #fff;
        border: 1px solid var(--lavender-primary);
        color: #6e59a5;
        font-weight: 500;
        font-size: 0.875rem;
        padding: 0.25rem;
    }

    .btn-increment,
    .btn-decrement,
    .btn-remove {
        background: #ffffff;
        border: 1px solid var(--lavender-primary);
        border-radius: 8px;
        padding: 0.25rem 0.5rem;
        color: var(--lavender-primary);
        transition: all 0.3s ease;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-remove {
        width: auto;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-increment:hover,
    .btn-decrement:hover,
    .btn-remove:hover {
        background: var(--lavender-primary);
        color: #ffffff;
    }

    .cart-footer {
        margin-top: 2rem;
        padding: 1rem;
        background: var(--lavender-light);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(155, 135, 245, 0.1);
    }

    .cart-total {
        color: #3c2f5f;
        font-weight: 600;
        font-size: 1.5rem;
        margin-bottom: 0;
    }

    .btn-checkout {
        background: var(--lavender-primary);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        font-size: 1rem;
        transition: all 0.3s ease;
        margin-right: 1rem;
    }

    .btn-checkout:hover {
        background: var(--lavender-dark);
    }

    .btn-clear {
        background: #f1c40f;
        color: #3c2f5f;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .btn-clear:hover {
        background: #d4ac0d;
    }

    .toast {
        background: var(--lavender-light);
        border: 1px solid var(--lavender-primary);
    }

    .toast-header {
        background: var(--lavender-primary);
        color: white;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle Increment
            document.querySelectorAll('.btn-increment').forEach(button => {
                button.addEventListener('click', function () {
                    const cartItemId = this.getAttribute('data-cart-item-id');
                    const quantityInput = this.closest('.quantity-control').querySelector('.quantity-input');
                    let quantity = parseInt(quantityInput.value) + 1;
                    updateCartItem(cartItemId, quantity, this);
                });
            });

            // Handle Decrement
            document.querySelectorAll('.btn-decrement').forEach(button => {
                button.addEventListener('click', function () {
                    const cartItemId = this.getAttribute('data-cart-item-id');
                    const quantityInput = this.closest('.quantity-control').querySelector('.quantity-input');
                    let quantity = parseInt(quantityInput.value) - 1;
                    if (quantity <= 0) {
                        removeCartItem(cartItemId, this);
                    } else {
                        updateCartItem(cartItemId, quantity, this);
                    }
                });
            });

            // Handle Remove
            document.querySelectorAll('.btn-remove').forEach(button => {
                button.addEventListener('click', function () {
                    const cartItemId = this.getAttribute('data-cart-item-id');
                    removeCartItem(cartItemId, this);
                });
            });

            function updateCartItem(cartItemId, quantity, button) {
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
                fetch('/Cart/Update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ cartItemId: parseInt(cartItemId), quantity: quantity })
                })
                .then(response => response.json())
                .then(data => {
                    button.innerHTML = button.classList.contains('btn-increment') ? '<i class="bi bi-plus"></i>' : button.classList.contains('btn-decrement') ? '<i class="bi bi-dash"></i>' : 'Remove';
                    const toast = new bootstrap.Toast(document.getElementById('cartToast'));
                    const toastBody = document.querySelector('#cartToast .toast-body');

                    if (data.success) {
                        const row = button.closest('.cart-item');
                        const quantityInput = row.querySelector('.quantity-input');
                        const price = parseFloat(row.querySelector('.price').getAttribute('data-price'));
                        const totalCell = row.querySelector('.total');

                        quantityInput.value = quantity;
                        const newTotal = (price * quantity).toFixed(2);
                        totalCell.setAttribute('data-total', newTotal);
                        totalCell.textContent = newTotal.toLocaleString('en-US', { style: 'currency', currency: 'USD' });

                        updateCartTotal();
                        toastBody.textContent = 'Quantity updated!';
                        toast.show();
                    } else {
                        toastBody.textContent = 'Error: ' + (data.message || 'Could not update quantity.');
                        toast.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    button.innerHTML = button.classList.contains('btn-increment') ? '<i class="bi bi-plus"></i>' : button.classList.contains('btn-decrement') ? '<i class="bi bi-dash"></i>' : 'Remove';
                    const toast = new bootstrap.Toast(document.getElementById('cartToast'));
                    document.querySelector('#cartToast .toast-body').textContent = 'An error occurred while updating the quantity.';
                    toast.show();
                });
            }

            function removeCartItem(cartItemId, button) {
                button.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
                fetch('/Cart/Remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ cartItemId: parseInt(cartItemId) })
                })
                .then(response => response.json())
                .then(data => {
                    button.innerHTML = button.classList.contains('btn-remove') ? 'Remove' : '<i class="bi bi-dash"></i>';
                    const toast = new bootstrap.Toast(document.getElementById('cartToast'));
                    const toastBody = document.querySelector('#cartToast .toast-body');

                    if (data.success) {
                        const row = button.closest('.cart-item');
                        row.remove();
                        if (document.querySelectorAll('.cart-item').length === 0) {
                            document.querySelector('.table-responsive').outerHTML = '<div class="alert alert-info no-cart-items">Your cart is empty.</div>';
                            document.querySelector('.cart-footer').remove();
                            document.querySelector('.container').insertAdjacentHTML('beforeend', '<a href="/Home/Index" class="btn btn-primary">Continue Shopping</a>');
                        } else {
                            updateCartTotal();
                        }
                        toastBody.textContent = 'Item removed from cart!';
                        toast.show();
                    } else {
                        toastBody.textContent = 'Error: ' + (data.message || 'Could not remove item.');
                        toast.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    button.innerHTML = button.classList.contains('btn-remove') ? 'Remove' : '<i class="bi bi-dash"></i>';
                    const toast = new bootstrap.Toast(document.getElementById('cartToast'));
                    document.querySelector('#cartToast .toast-body').textContent = 'An error occurred while removing the item.';
                    toast.show();
                });
            }

            function updateCartTotal() {
                let total = 0;
                document.querySelectorAll('.cart-item').forEach(row => {
                    const itemTotal = parseFloat(row.querySelector('.total').getAttribute('data-total'));
                    total += itemTotal;
                });
                const cartTotalElement = document.getElementById('cart-total');
                cartTotalElement.textContent = total.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
            }
        });
    </script>
}